version: 2.1

orbs:
  win: circleci/windows@2.2.0

executors:
  linux-bionic:
    docker:
      - image: circleci/buildpack-deps:bionic

  win-64:
    win/default

# Job definitions
variables:
  install-miniconda3: &install-miniconda3
    run:
      name: Download and install miniconda3
      command: |
        wget https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh -O ~/miniconda.sh
        bash ~/miniconda.sh -b -p $HOME/miniconda3
        export PATH=$HOME/miniconda3/bin:$PATH
        conda init bash
        conda update --yes conda  # Update CONDA without command line prompt
        #eval "$($HOME/miniconda3/bin/conda shell.bash hook)"

  install-build-essential: &install-build-essential
    run:
      name: Install build-essential
      command: |
        # Echo each command
        #        set -x
        # Exit on error.
        #        set -e
      # Core deps.
  #        sudo apt-get install build-essential cmake

  initialise-conda: &initialise-conda
    run:
      name: Initiate and setup conda env
      command: |
        echo "export PATH=$HOME/miniconda3/bin:$PATH" >> $BASH_ENV ; source $BASH_ENV
        conda create --name build_env python=3.7 -y
        conda install conda-build -y
        conda install anaconda-client -y
        conda install conda-verify -y
        conda config --add channels defaults
        conda config --add channels conda-forge
        conda config --add channels tudat-team
        echo "export ANACONDA_ROOT_CHANNEL=team-tudat" >> $BASH_ENV ; source $BASH_ENV

  lib_version: &lib_version
    run:
      name: Version info
      command: |
        version=$(cat version)
        # We update the version number on the dev branch. This ensures that master never gets ahead of dev
        # In order to control this, when we push to anaconda, we use the label 'dev' for the dev branch
        # and no label for the master branch. Thus when installing, a user will only get the dev versions
        # if they explictly ask for that label.
        if [ "${CIRCLE_BRANCH}" != "master" ]; then
          if [ "${CIRCLE_BRANCH}" == "develop" ]; then
            #version=$(cat version | perl -pe 's/^((\d+\.)*)(\d+)(.*)$/$1.($3+1).$4/e')
            version=$(cat version | perl -pe 's/^((\d+\.)*)(\d+)(.*)$/$1.($3+1).$4/e')
          else
            # add the branch name, but remove any dashes to make it fit with PEP-440
            version="${version}+${CIRCLE_BRANCH//-/}"
          fi
          version="${version//\//}"  # also remove slashes!
          printf ${version} > version
        fi
        # set up environment variables
        printf 'export VERSION=%s\n' "${version}" >> $BASH_ENV
        if [ "${CIRCLE_BRANCH}" == "develop" ]; then
          printf 'export NEW_GIT_TAG=%s+dev\n' "${version}" >> $BASH_ENV
          printf 'export ANACONDA_CHANNEL=${ANACONDA_ROOT_CHANNEL}/label/dev\n' >> $BASH_ENV
        else
          printf 'export NEW_GIT_TAG=%s\n' "${version}" >> $BASH_ENV
          printf 'export ANACONDA_CHANNEL=${ANACONDA_ROOT_CHANNEL}\n' >> $BASH_ENV
        fi
        # printf 'export DOCKER_IMAGE=%s/%s\n' "${CIRCLE_PROJECT_USERNAME}" "${CIRCLE_PROJECT_REPONAME}" >> $BASH_ENV
        # make sure to switch the '+' (needed for python) to a '.' (needed for docker)
        # printf 'export DOCKER_FLAG=${DOCKER_IMAGE}:${NEW_GIT_TAG//+/.}\n' >> $BASH_ENV
        source $BASH_ENV

  update_version: &update_version
    run:
      name: Update version
      command: |
        source $BASH_ENV
        # update version in git to make sure that this transfers into conda env
        git remote set-url origin "https://${GITHUB_USERNAME}:${GITHUB_TOKEN}@github.com/tudat-team/${CIRCLE_PROJECT_REPONAME}.git"
        git config --global user.email "${GITHUB_EMAIL}"
        git config --global user.name "${GITHUB_USERNAME}"
        git diff --quiet version || git commit version -m "[skip ci] ${CIRCLE_PROJECT_REPONAME} updated to ${NEW_GIT_TAG}"
        git tag ${NEW_GIT_TAG}

  build: &build
    run:
      name: Build and test
      command: |
        source $BASH_ENV
        # export PATH=$HOME/miniconda3/bin:$PATH
        echo "CONDA_BUILD_SYSROOT = $CONDA_BUILD_SYSROOT"

        # build the library
        echo "--- Running build ---"
        git submodule update --init --recursive
        conda build --no-anaconda-upload .conda
        # conda build .conda

        # get build artifact path
        echo "--- Getting artifact name ---"
        conda_artifact=$(conda build --quiet --output .conda)
        echo "conda_artifact: $conda_artifact"
        printf "export CONDA_ARTIFACT=${conda_artifact}" >> $BASH_ENV ; source $BASH_ENV

        # merge the results from all of the tests into a single file for parsing
        # echo "--- Saving test results ---"
        # mkdir test-reports
        # cp /tmp/*-junit.xml test-reports


  deploy: &deploy
    run:
      name: Deploy new version to conda
      branches:
        only:
          - master
          - develop
          - /rc-.*/

      command: |
        source $BASH_ENV
        echo "ANACONDA_USERNAME: ${ANACONDA_USERNAME}"
        anaconda login --username "${ANACONDA_USERNAME}" --password "${ANACONDA_PASSWORD}"
        echo "CONDA_ARTIFACT: ${CONDA_ARTIFACT}"
        # upload to conda -- logout afterwards to release the token and avoid race conditions
        # see the comment above where the version is calculated, to understand why both master
        # and dev are being pushed.
        if [ "${CIRCLE_BRANCH}" == "master" ]; then
          anaconda upload -u tudat-team "${CONDA_ARTIFACT}"
          # Causing an issue currently, will be fixed.
          # anaconda upload -u tudat-team -t "${ANACONDA_TOKEN}" "${CONDA_ARTIFACT}"
          echo "CONDA_ARTIFACT: ${CONDA_ARTIFACT}"
        elif [ "${CIRCLE_BRANCH}" == "develop" ]; then
          # Causing an issue currently, will be fixed.
          # anaconda upload -l "dev" -t "${ANACONDA_TOKEN}" -v "${NEW_GIT_TAG}" "${CONDA_ARTIFACT}"
          # anaconda upload -l "dev" -v "${NEW_GIT_TAG}" "${CONDA_ARTIFACT}"
          anaconda upload -u tudat-team -l "dev" "${CONDA_ARTIFACT}"
          echo "NEW_GIT_TAG: ${NEW_GIT_TAG}"
          echo "CONDA_ARTIFACT: ${CONDA_ARTIFACT}"
        fi
        anaconda logout
jobs:
  build-and-test:
    parameters:
      os:
        type: executor
    executor: << parameters.os >>
    steps:
      - checkout
      - *install-miniconda3
      - *install-build-essential
      - *initialise-conda
      - *lib_version
      #      - *update_version
      - *build
#      - *deploy

      # Test results.
      - store_test_results:
          path: ~/tmp/test-reports
      - store_artifacts:
          path: ~/tmp/test-reports

workflows:
  version: 2.1
  build-test-deploy:
    jobs:
      - build-and-test:
          context: tudat-global
          matrix:
            parameters:
              os: [linux-bionic]
